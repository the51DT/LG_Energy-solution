"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_fs = __toESM(require("fs"), 1);
var import_child_process = require("child_process");
var COMMITSHOTHASH_COMMAND = "rev-parse --short HEAD";
var DESCRIBE_COMMAND = "describe --always";
var BRANCH_COMMAND = "rev-parse --abbrev-ref HEAD";
var USERNAME = "config user.name";
var execGitCommond = (commond) => {
  if (!commond)
    return Promise.resolve("");
  const sh = "git " + commond;
  return new Promise((resolve, reject) => {
    (0, import_child_process.exec)(sh, (error, stdout) => error ? reject(error) : resolve(stdout.toString()?.replace("\n", "")));
  });
};
var getGitInfo = async () => {
  const commitHash = await execGitCommond(COMMITSHOTHASH_COMMAND);
  const describe = await execGitCommond(DESCRIBE_COMMAND);
  const branch = await execGitCommond(BRANCH_COMMAND);
  const username = await execGitCommond(USERNAME);
  return {
    commitHash,
    describe,
    branch,
    username
  };
};
var getAppInfo = () => {
  const pkg = import_fs.default.readFileSync(process.cwd() + "/package.json", "utf-8");
  const { name, version } = JSON.parse(pkg);
  const buildTime = formatDate();
  return {
    name,
    version,
    buildTime
  };
};
var src_default = (option) => {
  const { showBuildUser = false, enableMeta = true, enableLog = false, enableGlobal = false } = option || {};
  return {
    name: "vite-plugin-build-info",
    async transformIndexHtml() {
      const els = [];
      const appInfo = getAppInfo();
      let info = {
        ...appInfo
      };
      try {
        const gitInfo = await getGitInfo();
        info.commitHash = gitInfo.commitHash;
        info.describe = gitInfo.describe;
        info.branch = gitInfo.branch;
        showBuildUser && (info.buildUser = gitInfo.username);
      } catch (error) {
      }
      let appInfoText = JSON.stringify(info);
      appInfoText = appInfoText.replace(/"/g, "'");
      enableMeta && els.push({
        tag: "meta",
        injectTo: "head-prepend",
        attrs: {
          name: "app-info",
          content: appInfoText
        }
      });
      enableLog && els.push({
        tag: "script",
        injectTo: "body",
        children: `console.log(${appInfoText})`
      });
      enableGlobal && els.push({
        tag: "script",
        injectTo: "body",
        children: `__APP_INFO__ = ${appInfoText}`
      });
      return els;
    }
  };
};
function formatDate(value = Date.now(), format = "Y-M-D h:m:s") {
  const formatNumber = (n) => `0${n}`.slice(-2);
  const date = new Date(value);
  const formatList = ["Y", "M", "D", "h", "m", "s"];
  const resultList = [];
  resultList.push(date.getFullYear().toString());
  resultList.push(formatNumber(date.getMonth() + 1));
  resultList.push(formatNumber(date.getDate()));
  resultList.push(formatNumber(date.getHours()));
  resultList.push(formatNumber(date.getMinutes()));
  resultList.push(formatNumber(date.getSeconds()));
  for (let i = 0; i < resultList.length; i++) {
    format = format.replace(formatList[i], resultList[i]);
  }
  return format;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
